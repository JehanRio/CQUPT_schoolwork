/*今盒子里有n个小球，A、B两人轮流从盒中取球，每个人都可以看到另一个人取了多少个，也可以看到盒中还剩下多少个，并且两人都很聪明，不会做出错误的判断。
我们约定：每个人从盒子中取出的球的数目必须是：1，3，7或者8个；轮到某一方取球时不能弃权；A先取球，然后双方交替取球，直到取完；被迫拿到最后一个球的一方为负方（输方）。
请编程确定出在双方都不判断失误的情况下，对于特定的初始球数，A是否能赢？
程序运行时，从标准输入获得数据，其格式如下：
先是一个整数n（n<100），表示接下来有n个整数；然后是n个整数，每个占一行（整数<10000），表示初始球数。
程序则输出n行，表示A的输赢情况（输为0，赢为1）。
例如，用户输入：
4
1
2
10
18
则程序应该输出：
0
1
1
0
*/
/*
当只有一个球的时候，A必输，而当球数==1+1 || 1+3 || 1+7 ||  1+8 时 A可分别取1,3,7,8，使得后手输
所以A的必败态的球数+1 || +3 || +7 || +8 会成为A 的必胜态 
*/
#include <iostream>
using namespace std;
int main()
{
    int n;cin>>n;
    int cont[1005]={0};
    for(int i=1;i<=100;i++)
    {
        if(cont[i]==0)//从一个球开始，若为败，可推出必胜态
        {
            cont[i+1]=1,cont[i+3]=1,cont[i+7]=1,cont[i+8]=1;
        }
    }
    while(n--)
    {
        int sum;cin>>sum;
        cout<<cont[sum]<<endl;
    }
    return 0;
}