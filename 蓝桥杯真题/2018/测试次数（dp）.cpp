/**x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。
各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。

x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。

如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。
特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。
如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n

为了减少测试次数，从每个厂家抽样3部手机参加测试。

某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？

请填写这个最多测试次数。*/
#include<iostream>
#include<cmath>
using namespace std;

int dp[1005][5];
int main()
{
    for(int i=1;i<=1000;i++)
        dp[i][1]=i;//只有一部手机情况下 测试次数为i
    for(int cnt=2;cnt<=3;cnt++)//当前手机数量
    {
        for(int ind=1;ind<=1000;ind++)//每一层都去试一下
        {
            dp[ind][cnt]=dp[ind-1][cnt]+1;//这一层的测试数量等于上一层的测试数量加上这一层的
            for(int k=2;k<=ind;k++)//当前的需要测试的楼层
            {
                dp[ind][cnt] = min(dp[ind][cnt] , 1+ max(dp[k-1][cnt-1],dp[ind-k][cnt]));//在摔坏了少一部手机，楼层变为k-1 与 
                                                                                        //这层没坏，手机不变 中选最大值（最坏运气） min为最佳决策
            }
        }
    }
    cout<<dp[1000][3];
    return 0;
}
//总结：怎么确定第一个手机在哪扔？每层都试试，哪层的最坏情况（max）最好（min），就去哪层扔。